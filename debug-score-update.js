// Script de debugging para verificar las actualizaciones de puntuaci√≥n
// Ejecuta este c√≥digo en la consola del navegador (F12) en Lilo & Stitch

console.log('üîç DEBUG: Verificando sistema de actualizaciones de puntuaci√≥n...');

// Verificar si las funciones Firebase est√°n disponibles
console.log('üìã Funciones Firebase disponibles:');
console.log('  - firebaseDB:', !!window.firebaseDB);
console.log('  - firebaseUpdateDoc:', !!window.firebaseUpdateDoc);
console.log('  - firebaseDoc:', !!window.firebaseDoc);
console.log('  - firebaseGetDocs:', !!window.firebaseGetDocs);

// Funci√≥n para testear la l√≥gica de actualizaci√≥n
async function testScoreUpdate(playerName, newScore) {
  console.log(`üß™ TESTING: Score update for ${playerName} with ${newScore} points`);
  
  try {
    // Simular la l√≥gica de saveScore
    if (window.firebaseDB) {
      const q = window.firebaseQuery(
        window.firebaseCollection(window.firebaseDB, 'lilo-stitchScores'),
        window.firebaseOrderBy('score', 'desc')
      );
      
      console.log('üîç Querying Firebase for existing scores...');
      const querySnapshot = await window.firebaseGetDocs(q);
      
      let existingDocId = null;
      let existingScore = null;
      let shouldUpdate = false;
      
      console.log(`üìä Found ${querySnapshot.docs.length} total scores`);
      
      querySnapshot.docs.forEach(doc => {
        const data = doc.data();
        console.log(`  - ${data.name}: ${data.score} points`);
        
        if (data.name && data.name.toLowerCase() === playerName.toLowerCase()) {
          existingDocId = doc.id;
          existingScore = data.score || 0;
          shouldUpdate = newScore > existingScore;
          console.log(`üéØ Found existing score for ${playerName}:`);
          console.log(`    Current: ${existingScore}, New: ${newScore}, Should update: ${shouldUpdate}`);
        }
      });
      
      if (!existingDocId) {
        console.log(`‚ú® ${playerName} is a new player - would ADD new score`);
      } else if (shouldUpdate) {
        console.log(`üîÑ ${playerName} improved - would UPDATE from ${existingScore} to ${newScore}`);
      } else {
        console.log(`‚ö†Ô∏è ${playerName} did not improve - would NOT update (${newScore} <= ${existingScore})`);
      }
      
    } else {
      console.log('‚ùå Firebase not available');
    }
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// Funci√≥n helper para testear
console.log('üí° Para testear, ejecuta:');
console.log('  testScoreUpdate("Eva", 1800)  // Testear si Eva mejorar√≠a con 1800 puntos');

// Hacer testScoreUpdate disponible globalmente
window.testScoreUpdate = testScoreUpdate;